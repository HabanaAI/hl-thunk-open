; Test config file for hlthunk tests
; Each group is a configuration for a different test
; The name of the test is inside the []
; Numbers can be with 0x (hex) or without (decimal)
;
; DMA direction field:
; HOST_TO_DRAM = 0
; HOST_TO_SRAM = 1
; DRAM_TO_SRAM = 2
; SRAM_TO_DRAM = 3
; SRAM_TO_HOST = 4
; DRAM_TO_HOST = 5
; DRAM_TO_DRAM = 6
; SRAM_TO_SRAM = 7

[dma_custom_test]
dma_dir                 = 0		; HOST_TO_DRAM
dst_addr                = 0x020000000
size                    = 0x7E0000000
chunk_size              = 0x020000000
sequential              = false		; true or false (false == random or fixed value)
; value                 = 0x12345678	; only relevant if sequential = false
read_cnt                = 1		; how many times to read a chunk before comparing it
write_cnt               = 1		; how many times to write a chunk before reading it
stop_on_err             = true		; true - stop after 10 errors in comparision
zero_before_write       = false		; true - memset to 0 before writing
write_to_read_delay_ms  = 0		; delay, in ms, between write(s) and read(s)

[map_custom_test]
dram_size         = 0x1000
dram_num_of_alloc = 1			; set to 0 to disable dram allocations
host_size         = 0x1000
host_num_of_alloc = 1			; set to 0 to disable host allocations
create_tdr        = false		; true to create tdr after allocations are made

[dma_entire_dram_test]
dma_size  = 0x10000			; set to 64KB for PLDM regressions
zone_size = 0x4000000			; set to 64MB for PLDM regressions

[register_security_cfg]
reg_addr = 0x7FFC0DFF60			; register address to write to (offset in case of wreg)
value    = 0x12345678			; value to write to the register
use_wreg = false			; false means using msg_long from DMA0 QMAN
qid      = 0				; QMAN ID in case of use_wreg==true

[dma_super_stress]			; gaudi only test
mode              = random		; random, sequential, pattern
num_of_iterations = 400			; Each iteration transfers 31.5GB per DMA ch
pattern_phase1    = 0x0			; 64-bit pattern for phase1
pattern_phase2    = 0x0			; 64-bit pattern for phase2
pattern_phase3    = 0x0			; 64-bit pattern for phase3
pattern_phase4    = 0x0			; 64-bit pattern for phase4
pattern_phase5    = 0x0			; 64-bit pattern for phase5
pattern_phase6    = 0x0			; 64-bit pattern for phase6
pattern_phase7    = 0x0			; 64-bit pattern for phase7
pattern_phase8    = 0x0			; 64-bit pattern for phase8

[read_through_pci_test]			; read every jump bytes from start to end
start_addr  = 0x7FFC980000
end_addr    = 0x7FFCC00000
jump        = 0x1000
print_delta = 0x100000			; delta between prints of current address